void level3_1(Algorithm ai, vector<Shapes *> &shapes, vector<int> &clientLoc, vector<int> &serverLoc ){
    shapes.push_back(new Shapes('C', C_light,C_dark, 2, 1));
    shapes.push_back(new Shapes('T', T_light, T_dark, 0, 2));
    shapes.push_back(new Shapes('I', I_light, I_dark, 0, 3));
    shapes.push_back(new Shapes('T', T_light, T_dark, 2, 4));
    shapes.push_back(new Shapes('T', T_light, T_dark, 2, 5));
    shapes.push_back(new Shapes('I', I_light, I_dark, 0, 6));
    shapes.push_back(new Shapes('L', L_light, L_dark, 1, 7));
    shapes.push_back(new Shapes('L', L_light, L_dark, 3, 8));
    shapes.push_back(new Shapes('L', L_light, L_dark, 1, 9));
    shapes.push_back(new Shapes('C', C_light, C_dark, 2, 10));
    shapes.push_back(new Shapes('L', L_light, L_dark, 0, 11));
    shapes.push_back(new Shapes('P', P_light, P_dark, 0, 12));
    shapes.push_back(new Shapes('C', C_light, C_dark, 2, 13));
    shapes.push_back(new Shapes('C', C_light, C_dark, 3, 14));
    shapes.push_back(new Shapes('I', I_light, I_dark, 1, 15));
    shapes.push_back(new Shapes('L', L_light, L_dark, 1, 16));
    shapes.push_back(new Shapes('T', T_light, T_dark, 0, 17));
    shapes.push_back(new Shapes('C', C_light, C_dark, 0, 18));
    shapes.push_back(new Shapes('P', P_light, P_dark, 0, 19));
    shapes.push_back(new Shapes('I', I_light, I_dark, 1, 20));
    shapes.push_back(new Shapes('L', L_light, L_dark, 0, 21));
    shapes.push_back(new Shapes('L', L_light, L_dark, 0, 22));
    shapes.push_back(new Shapes('T', T_light, T_dark, 1, 23));
    shapes.push_back(new Shapes('L', L_light, L_dark, 2, 24));
    shapes.push_back(new Shapes('I', I_light, I_dark, 0, 25));
    shapes.push_back(new Shapes('T', T_light, T_dark, 0, 26));
    shapes.push_back(new Shapes('C', C_light, C_dark, 1, 27));
    shapes.push_back(new Shapes('I', I_light, I_dark, 1, 28));
    shapes.push_back(new Shapes('C', C_light, C_dark, 0, 29));
    shapes.push_back(new Shapes('T', T_light, T_dark, 0, 30));
    shapes.push_back(new Shapes('S', "S_light_9.bmp", 9, 31));//change both name and position
    shapes.push_back(new Shapes('C', C_light, C_dark, 0, 32));
    shapes.push_back(new Shapes('L', L_light, L_dark, 1, 33));
    shapes.push_back(new Shapes('T', T_light, T_dark, 2, 34));
    shapes.push_back(new Shapes('T', T_light, T_dark, 3, 35));
    shapes.push_back(new Shapes('L', L_light, L_dark, 1, 36));
    shapes.push_back(new Shapes('T', T_light, T_dark, 1, 37));
    shapes.push_back(new Shapes('P', P_light, P_dark, 0, 38));
    shapes.push_back(new Shapes('I', I_light, I_dark, 0, 39));
    shapes.push_back(new Shapes('I', I_light, I_dark, 1, 40));
    shapes.push_back(new Shapes('P', P_light, P_dark, 0, 41));
    shapes.push_back(new Shapes('L', L_light, L_dark, 0, 42));
    shapes.push_back(new Shapes('I', I_light, I_dark, 0, 43));
    shapes.push_back(new Shapes('I', I_light, I_dark, 0, 44));
    shapes.push_back(new Shapes('L', L_light, L_dark, 3, 45));
    shapes.push_back(new Shapes('T', T_light, T_dark, 2, 46));
    shapes.push_back(new Shapes('C', C_light, C_dark, 0, 47));
    shapes.push_back(new Shapes('T', T_light, T_dark, 1, 48));
    shapes.push_back(new Shapes('L', L_light, L_dark, 1, 49));
    shapes.push_back(new Shapes('C', C_light, C_dark, 3, 50));
    shapes.push_back(new Shapes('L', L_light, L_dark, 0, 51));
    shapes.push_back(new Shapes('C', C_light, C_dark, 0, 52));
    shapes.push_back(new Shapes('L', L_light, L_dark, 1, 53));
    shapes.push_back(new Shapes('I', I_light, I_dark, 0, 54));
    shapes.push_back(new Shapes('L', L_light, L_dark, 2, 55));
    shapes.push_back(new Shapes('C', C_light, C_dark, 0, 56));

    clientLoc.push_back(1);
    clientLoc.push_back(10);
    clientLoc.push_back(13);
    clientLoc.push_back(14);
    clientLoc.push_back(18);
    clientLoc.push_back(27);
    clientLoc.push_back(29);
    clientLoc.push_back(32);
    clientLoc.push_back(47);
    clientLoc.push_back(50);
    clientLoc.push_back(52);
    clientLoc.push_back(56);
    
    serverLoc.push_back(31);
    
    ai.getClientsConnected(shapes, serverLoc, clientLoc);
}

void level3_2(Algorithm ai, vector<Shapes *> &shapes, vector<int> &clientLoc, vector<int> &serverLoc ){
    shapes.push_back(new Shapes('L', L_light,L_dark, 2, 1));
    shapes.push_back(new Shapes('L', L_light, L_dark, 0, 2));
    shapes.push_back(new Shapes('C', C_light, C_dark, 0, 3));
    shapes.push_back(new Shapes('L', L_light, L_dark, 2, 4));
    shapes.push_back(new Shapes('T', T_light, T_dark, 2, 5));
    shapes.push_back(new Shapes('L', L_light, L_dark, 0, 6));
    shapes.push_back(new Shapes('C', C_light, C_dark, 1, 7));
    shapes.push_back(new Shapes('T', T_light, T_dark, 3, 8));
    shapes.push_back(new Shapes('T', T_light, T_dark, 1, 9));
    shapes.push_back(new Shapes('T', T_light, T_dark, 2, 10));
    shapes.push_back(new Shapes('I', I_light, I_dark, 0, 11));
    shapes.push_back(new Shapes('I', I_light, I_dark, 0, 12));
    shapes.push_back(new Shapes('C', C_light, C_dark, 2, 13));
    shapes.push_back(new Shapes('I', I_light, I_dark, 1, 14));
    shapes.push_back(new Shapes('I', I_light, I_dark, 1, 15));
    shapes.push_back(new Shapes('S', "S_light_0.bmp", 0, 16));//change both name and position
    shapes.push_back(new Shapes('P', P_light, P_dark, 0, 17));
    shapes.push_back(new Shapes('L', L_light, L_dark, 0, 18));
    shapes.push_back(new Shapes('T', T_light, T_dark, 0, 19));
    shapes.push_back(new Shapes('I', I_light, I_dark, 1, 20));
    shapes.push_back(new Shapes('T', T_light, T_dark, 0, 21));
    shapes.push_back(new Shapes('C', C_light, C_dark, 0, 22));
    shapes.push_back(new Shapes('C', C_light, C_dark, 1, 23));
    shapes.push_back(new Shapes('T', T_light, T_dark, 2, 24));
    shapes.push_back(new Shapes('C', C_light, C_dark, 0, 25));
    shapes.push_back(new Shapes('T', T_light, T_dark, 0, 26));
    shapes.push_back(new Shapes('L', L_light, L_dark, 1, 27));
    shapes.push_back(new Shapes('T', T_light, T_dark, 1, 28));
    shapes.push_back(new Shapes('L', L_light, L_dark, 0, 29));
    shapes.push_back(new Shapes('L', L_light, L_dark, 0, 30));
    shapes.push_back(new Shapes('C', C_light, C_dark, 1, 31));
    shapes.push_back(new Shapes('L', L_light, L_dark, 0, 32));
    shapes.push_back(new Shapes('L', L_light, L_dark, 1, 33));
    shapes.push_back(new Shapes('T', T_light, T_dark, 2, 34));
    shapes.push_back(new Shapes('L', L_light, L_dark, 3, 35));
    shapes.push_back(new Shapes('I', I_light, I_dark, 1, 36));
    shapes.push_back(new Shapes('L', L_light, L_dark, 1, 37));
    shapes.push_back(new Shapes('I', I_light, I_dark, 0, 38));
    shapes.push_back(new Shapes('T', T_light, T_dark, 0, 39));
    shapes.push_back(new Shapes('C', C_light, C_dark, 1, 40));
    shapes.push_back(new Shapes('T', T_light, T_dark, 0, 41));
    shapes.push_back(new Shapes('C', C_light, C_dark, 0, 42));
    shapes.push_back(new Shapes('T', T_light, T_dark, 1, 43));
    shapes.push_back(new Shapes('C', C_light, C_dark, 0, 44));
    shapes.push_back(new Shapes('C', C_light, C_dark, 3, 45));
    shapes.push_back(new Shapes('C', C_light, C_dark, 2, 46));
    shapes.push_back(new Shapes('L', L_light, L_dark, 0, 47));
    shapes.push_back(new Shapes('P', P_light, P_dark, 0, 48));
    shapes.push_back(new Shapes('T', T_light, T_dark, 1, 49));
    shapes.push_back(new Shapes('L', L_light, L_dark, 3, 50));
    shapes.push_back(new Shapes('I', I_light, I_dark, 1, 51));
    shapes.push_back(new Shapes('T', T_light, T_dark, 0, 52));
    shapes.push_back(new Shapes('I', I_light, I_dark, 0, 53));
    shapes.push_back(new Shapes('T', T_light, T_dark, 1, 54));
    shapes.push_back(new Shapes('T', T_light, T_dark, 2, 55));
    shapes.push_back(new Shapes('L', L_light, L_dark, 3, 56));

    clientLoc.push_back(3);
    clientLoc.push_back(7);
    clientLoc.push_back(13);
    clientLoc.push_back(22);
    clientLoc.push_back(23);
    clientLoc.push_back(25);
    clientLoc.push_back(31);
    clientLoc.push_back(40);
    clientLoc.push_back(42);
    clientLoc.push_back(44);
    clientLoc.push_back(45);
    clientLoc.push_back(46);
    
    serverLoc.push_back(16);
    
    ai.getClientsConnected(shapes, serverLoc, clientLoc);
}

void level3_3(Algorithm ai, vector<Shapes *> &shapes, vector<int> &clientLoc, vector<int> &serverLoc ){
    shapes.push_back(new Shapes('C', C_light,C_dark, 2, 1));
    shapes.push_back(new Shapes('L', L_light, L_dark, 0, 2));
    shapes.push_back(new Shapes('C', C_light, C_dark, 0, 3));
    shapes.push_back(new Shapes('C', C_light, C_dark, 2, 4));
    shapes.push_back(new Shapes('T', T_light, T_dark, 2, 5));
    shapes.push_back(new Shapes('T', T_light, T_dark, 0, 6));
    shapes.push_back(new Shapes('C', C_light, C_dark, 1, 7));
    shapes.push_back(new Shapes('C', C_light, C_dark, 3, 8));
    shapes.push_back(new Shapes('T', T_light, T_dark, 1, 9));
    shapes.push_back(new Shapes('P', P_light, P_dark, 0, 10));
    shapes.push_back(new Shapes('T', T_light, T_dark, 0, 11));
    shapes.push_back(new Shapes('L', L_light, L_dark, 0, 12));
    shapes.push_back(new Shapes('I', I_light, I_dark, 1, 13));
    shapes.push_back(new Shapes('C', C_light, C_dark, 3, 14));
    shapes.push_back(new Shapes('L', L_light, L_dark, 1, 15));
    shapes.push_back(new Shapes('C', C_light, C_dark, 1, 16));
    shapes.push_back(new Shapes('L', L_light, L_dark, 0, 17));
    shapes.push_back(new Shapes('T', T_light, T_dark, 0, 18));
    shapes.push_back(new Shapes('T', T_light, T_dark, 0, 19));
    shapes.push_back(new Shapes('P', P_light, P_dark, 0, 20));
    shapes.push_back(new Shapes('T', T_light, T_dark, 0, 21));
    shapes.push_back(new Shapes('T', T_light, T_dark, 0, 22));
    shapes.push_back(new Shapes('L', L_light, L_dark, 1, 23));
    shapes.push_back(new Shapes('L', L_light, L_dark, 2, 24));
    shapes.push_back(new Shapes('C', C_light, C_dark, 0, 25));
    shapes.push_back(new Shapes('I', I_light, I_dark, 0, 26));
    shapes.push_back(new Shapes('C', C_light, C_dark, 1, 27));
    shapes.push_back(new Shapes('I', I_light, I_dark, 1, 28));
    shapes.push_back(new Shapes('L', L_light, L_dark, 0, 29));
    shapes.push_back(new Shapes('T', T_light, T_dark, 0, 30));
    shapes.push_back(new Shapes('T', T_light, T_dark, 2, 31));
    shapes.push_back(new Shapes('L', L_light, L_dark, 0, 32));
    shapes.push_back(new Shapes('T', T_light, T_dark, 1, 33));
    shapes.push_back(new Shapes('L', L_light, L_dark, 2, 34));
    shapes.push_back(new Shapes('I', I_light, I_dark, 0, 35));
    shapes.push_back(new Shapes('L', L_light, L_dark, 1, 36));
    shapes.push_back(new Shapes('T', T_light, T_dark, 1, 37));
    shapes.push_back(new Shapes('P', P_light, P_dark, 0, 38));
    shapes.push_back(new Shapes('P', P_light, P_dark, 0, 39));
    shapes.push_back(new Shapes('L', L_light, L_dark, 1, 40));
    shapes.push_back(new Shapes('L', L_light, L_dark, 0, 41));
    shapes.push_back(new Shapes('L', L_light, L_dark, 2, 42));
    shapes.push_back(new Shapes('I', I_light, I_dark, 0, 43));
    shapes.push_back(new Shapes('C', C_light, C_dark, 0, 44));
    shapes.push_back(new Shapes('P', P_light, P_dark, 0, 45));
    shapes.push_back(new Shapes('S', "S_light_14.bmp", 14, 46));//change both name and position
    shapes.push_back(new Shapes('I', I_light, I_dark, 0, 47));
    shapes.push_back(new Shapes('C', C_light, C_dark, 1, 48));
    shapes.push_back(new Shapes('C', C_light, C_dark, 1, 49));
    shapes.push_back(new Shapes('L', L_light, L_dark, 3, 50));
    shapes.push_back(new Shapes('C', C_light, C_dark, 0, 51));
    shapes.push_back(new Shapes('C', C_light, C_dark, 0, 52));
    shapes.push_back(new Shapes('L', L_light, L_dark, 2, 53));
    shapes.push_back(new Shapes('I', I_light, I_dark, 0, 54));
    shapes.push_back(new Shapes('I', I_light, I_dark, 1, 55));
    shapes.push_back(new Shapes('L', L_light, L_dark, 0, 56));

    clientLoc.push_back(1);
    clientLoc.push_back(3);
    clientLoc.push_back(4);
    clientLoc.push_back(7);
    clientLoc.push_back(8);
    clientLoc.push_back(14);
    clientLoc.push_back(16);
    clientLoc.push_back(25);
    clientLoc.push_back(27);
    clientLoc.push_back(44);
    clientLoc.push_back(48);
    clientLoc.push_back(49);
    clientLoc.push_back(51);
    clientLoc.push_back(52);
    
    serverLoc.push_back(46);
    
    ai.getClientsConnected(shapes, serverLoc, clientLoc);
}


